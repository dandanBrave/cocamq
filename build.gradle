apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8

version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile 'io.netty:netty:3.7.0.Final'
    compile 'org.apache.zookeeper:zookeeper:3.4.5'
    compile 'com.101tec:zkclient:0.3'
    compile 'com.google.guava:guava:14.0.1'
    compile 'log4j:log4j:1.2.16'
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'com.google.protobuf:protobuf-java:2.5.0'
    compile 'org.easymock:easymock:3.1'
    compile 'org.slf4j:slf4j-api:1.6.4'
    compile 'commons-lang:commons-lang:2.6'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.2.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.2.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.2.3'
    compile 'cglib:cglib:2.2.2'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.2.2'
    compile 'com.caucho:hessian:3.1.5'
    testCompile group: 'junit', name: 'junit', version: '4.11'

}

def env = System.getProperty("env")?:""

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}


task(runMsgServer, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jinn.cocamq.broker.BrokerBootstrap'
    classpath = sourceSets.main.runtimeClasspath
}

task copyJar(dependsOn: 'assemble',type: Copy) {
    into 'build/libs'
}

task dist(dependsOn: 'assemble',type: Zip) {
    from jar.outputs.files
    from(configurations.runtime) {
        into('libs')
    }
    from 'build/resources/main'
    from('scripts'){
        into('bin')
    }
}

defaultTasks 'dist'

